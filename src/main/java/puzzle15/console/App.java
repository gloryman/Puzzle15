/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package puzzle15.console;

import org.jline.reader.impl.LineReaderImpl;
import org.jline.terminal.Terminal;
import org.jline.terminal.TerminalBuilder;
import picocli.CommandLine;
import puzzle15.game.GameConst;
import puzzle15.game.Game;
import puzzle15.game.ClassicGameCompletionChecker;
import puzzle15.game.GameCompletionChecker;
import puzzle15.game.board.TwoDimensionalArrayBoard;
import puzzle15.game.board.cell.*;
import puzzle15.console.io.ConsoleController;
import puzzle15.console.io.GameController;
import puzzle15.console.ui.ClearScreen;
import puzzle15.console.ui.ConsoleGameRender;
import java.io.IOException;


@CommandLine.Command(description = "Puzzle15", name = "Puzzle15", mixinStandardHelpOptions = true)
public class App implements Runnable {
    @CommandLine.Option(names = {"-w" , "--boardWidth"}, description = "Puzzle15 board width: ${DEFAULT-VALUE}")
    private int boardWidth = 4;

    @CommandLine.Option(names = {"-s", "--boardHeight"}, description = "Puzzle15 board height: ${DEFAULT-VALUE}")
    private int boardHeight = 4    ;

    @CommandLine.Option(names = {"-c", "--no-clear-screen"}, description = "Do not clear screen on startup: ${DEFAULT-VALUE}")
    private boolean isScreenClearPrevent = false;

    @CommandLine.Option(names = {"--draw-row"}, description = "Draw board at row: ${DEFAULT-VALUE}")
    private int boardStartRow = 4;

    @CommandLine.Option(names = {"--draw-column"}, description = "Draw board at column: ${DEFAULT-VALUE}")
    private int boardStartColumn = 8;

    @CommandLine.Option(names = {"--board-preset"}, description = "Default: ${DEFAULT-VALUE}.  Options: ${COMPLETION-CANDIDATES}.")
    private ConsoleGlobals.BoardPreset boardPreset = ConsoleGlobals.BoardPreset.RANDOM;

    public static void main(String[] args) {
        new CommandLine(new App()).execute(args);
    }

    @Override
    public void run() {
        ConsoleLoop consoleLoop = buildConsoleGame();
        if (!isScreenClearPrevent) {
            new ClearScreen().apply();
        }

        consoleLoop.run();
    }

    private ConsoleLoop buildConsoleGame() {
        CellsGenerator cellsGenerator = calcCellsGenerator(boardPreset);
        TwoDimensionalArrayBoard gameBoard = new TwoDimensionalArrayBoard(cellsGenerator, boardHeight, boardWidth);
        ConsoleGameRender consoleGameRender = new ConsoleGameRender(boardStartRow, boardStartColumn);

        LineReaderImpl ttyReader = initTerminalReader();
        GameController consoleController = new ConsoleController(ttyReader, ConsoleGlobals.KEYS_TO_EVENT_DICT);
        GameCompletionChecker checker = new ClassicGameCompletionChecker();

        Game game = new Game(gameBoard, checker);
        return new ConsoleLoop(consoleGameRender, consoleController, game);
    }

    private LineReaderImpl initTerminalReader() {
        LineReaderImpl ttyReader = null;
        try {
            Terminal terminal = TerminalBuilder
                    .builder()
                    .dumb(true)
                    .jansi(true)
                    .system(true)
                    .nativeSignals(true)
                    .build();
            terminal.enterRawMode();
            ttyReader = new LineReaderImpl(terminal);
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println(GameConst.SYSTEM_UNKNOWN_ERROR);
            System.exit(-1);
        }

        return ttyReader;

    }

    private CellsGenerator calcCellsGenerator(ConsoleGlobals.BoardPreset boardPreset) {
        return ConsoleGlobals.mapPresetOptionToCellsGenerator.getOrDefault(boardPreset, new RandomCellsGenerator());
    }
}
